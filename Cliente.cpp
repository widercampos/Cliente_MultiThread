
/* Cliente.cpp - Generated by Visual Multi-Thread Win32 */

// WIN32_LEAN_AND_MEAN macro prevents the Winsock.h from being 
// included by the Windows.h header
#define WIN32_LEAN_AND_MEAN

// The Winsock2.h header file contains most of the Winsock functions, 
// structures, and definitions. The Ws2tcpip.h header file contains 
// definitions introduced in the WinSock 2 Protocol-Specific
// The Winsock2.h header file internally includes core elements from 
// the Windows.h header file
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include "AppObjects.h"
#include "my_socket.h"
#include <string>
#include <cstdio>
#include <iostream>
#include <string>

using namespace std;

// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")

DWORD WINAPI Pooling(SOCKET *lpParemeter);

DWORD WINAPI Pooling(SOCKET *lpParameter) {
	message msg2;
	SOCKET ClientSocket;
	ClientSocket = *lpParameter;
	int iResult;

	while (true) {
		recv(ClientSocket, (char *)&msg2, sizeof(msg2), 0);
		std::cout << "\n" << msg2.buf;
		Sleep(10);
	}
	//// Send a message	'0' to Server in order to close the connection
	//msg2.buf[0] = '0';
	//iResult = send(ClientSocket, (const char *)&msg2, (int)sizeof(msg2), 0);
	//closesocket(ClientSocket);
	return 0;
}

DWORD WINAPI thread_Cliente(LPVOID lpParameter);

DWORD WINAPI thread_Cliente(LPVOID lpParameter)
{
	// Create a WSADATA object called wsaData.
	WSADATA wsaData;
	SOCKET ConnectSocket = INVALID_SOCKET;
	// Declare an addrinfo object that contains a sockaddr structure 
	// and initialize these values.
	struct addrinfo *result = NULL,
		*ptr = NULL,
		hints;

	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;
	message msg1;

	SocketParams *params;
	params = (SocketParams *)lpParameter;


	printf("Digite seu nome: \n");
	scanf("%s", &msg1.name);
	msg1.nro_msg = 1;

	std::cout << ">> Conectando com o servidor...\n";
	// Initialize Winsock  
	// The WSAStartup function is called to initiate use of WS2_32.dll
	// The MAKEWORD(2,2) parameter of WSAStartup makes a request for 
	// version 2.2 of Winsock on the system
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != 0)
	{
		printf("WSAStartup failed with error: %d\n", iResult);
		return 1;
	}

	ZeroMemory(&hints, sizeof(hints));
	// Internet address family is unspecified so that either an 
	// IPv6 or IPv4 address can be returned. The application requests 
	// the socket type to be a stream socket for the TCP protocol
	hints.ai_family = params->family;
	hints.ai_socktype = params->socktype;
	hints.ai_protocol = params->protocol;

	/* Resolve the server address and port */
	// getaddrinfo function request the IP address for the server name and 
	// the TCP port on the server that the client will connect
	iResult = getaddrinfo(params->ip, params->port, &hints, &result);
	if (iResult != 0) {
		printf("getaddrinfo failed with error: %d\n", iResult);
		WSACleanup();
		return 1;
	}
	/* Attempt to connect to an address until one succeeds  */
	for (ptr = result; ptr != NULL; ptr = ptr->ai_next)
	{
		/* Create a SOCKET for connecting to server */
		ClientSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
		if (ClientSocket == INVALID_SOCKET)
		{
			printf("socket failed with error: %ld\n", WSAGetLastError());
			WSACleanup();
			return 1;
		}

		/* Connect to server - For a client to communicate on a network, it must connect
		to a server. Connect function request the created socket and the sockaddr
		structure as parameters */
		iResult = connect(ClientSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
		if (iResult == SOCKET_ERROR)
		{
			closesocket(ClientSocket);
			ClientSocket = INVALID_SOCKET;
			continue;
		}
		break;
	}

	Cliente = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)Pooling, &ClientSocket, 0, 0);
	// envia primeiro uma mensagem para o server saber o nome do cliente
	iResult = send(ClientSocket, (const char *)&msg1, (int)sizeof(msg1), 0);
	if (iResult == SOCKET_ERROR) {
		printf("send failed with error: %d\n", WSAGetLastError());
		closesocket(ClientSocket);
		WSACleanup();
		return 1;
	}
	std::cout << ">> Conectado. Para sair, digite \"/quit\"\n";
	std::cout << ">> Voce entrou na sala\n";

	std::string msg;
	do
	{
		//std::cout << msg1.name << " diz: ";
		//std::getline(std::cin, msg);
		//strcpy(msg1.buf, msg);
		scanf("%s", &msg1.buf);

		if (msg1.buf != "/quit") {
			/* Client send a message to the Server */
			iResult = send(ClientSocket, (const char *)&msg1, (int)sizeof(msg1), 0);
			if (iResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
		}
		msg1.nro_msg++;
	} while (msg1.buf != "/quit");

	// Send a message	'0' to Server in order to close the connection
	msg1.buf[0] = '0';
	iResult = send(ClientSocket, (const char *)&msg1, (int)sizeof(msg1), 0);
	closesocket(ClientSocket);
	return 0;
}