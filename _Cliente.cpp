/* Cliente.cpp - Generated by Visual Multi-Thread Win32 */

/* ALUNOS: 
*			Widerlani Augusto de Campos 489476
*			Willian Kaminobo Takaezu	489310
*/

// WIN32_LEAN_AND_MEAN macro prevents the Winsock.h from being 
// included by the Windows.h header
#define WIN32_LEAN_AND_MEAN

// The Winsock2.h header file contains most of the Winsock functions, 
// structures, and definitions. The Ws2tcpip.h header file contains 
// definitions introduced in the WinSock 2 Protocol-Specific
// The Winsock2.h header file internally includes core elements from 
// the Windows.h header file
#include <winsock2.h>
#include <ws2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include "AppObjects.h"
#include "my_socket.h"
#include <string>
#include <cstdio>
#include <iostream>


using namespace std;

// Need to link with Ws2_32.lib, Mswsock.lib, and Advapi32.lib
#pragma comment (lib, "Ws2_32.lib")
#pragma comment (lib, "Mswsock.lib")
#pragma comment (lib, "AdvApi32.lib")

DWORD WINAPI thread_Cliente(LPVOID lpParameter);

DWORD WINAPI thread_Cliente(LPVOID lpParameter)
{
	// Create a WSADATA object called wsaData.
	WSADATA wsaData;
	SOCKET ConnectSocket = INVALID_SOCKET;
	// Declare an addrinfo object that contains a sockaddr structure 
	// and initialize these values.
	struct addrinfo *result = NULL,
		*ptr = NULL,
		hints;

	int iResult;
	int recvbuflen = DEFAULT_BUFLEN;
	message msg1;

	SocketParams *params;
	params = (SocketParams *)lpParameter;

	printf("Entre com o nome do Cliente: \n");
	scanf("%s", &msg1.name);
	msg1.nro_msg = 1;

	// Initialize Winsock  
	// The WSAStartup function is called to initiate use of WS2_32.dll
	// The MAKEWORD(2,2) parameter of WSAStartup makes a request for 
	// version 2.2 of Winsock on the system
	iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
	if (iResult != 0)
	{
		printf("WSAStartup failed with error: %d\n", iResult);
		return 1;
	}

	ZeroMemory(&hints, sizeof(hints));
	// Internet address family is unspecified so that either an 
	// IPv6 or IPv4 address can be returned. The application requests 
	// the socket type to be a stream socket for the TCP protocol
	hints.ai_family = params->family;
	hints.ai_socktype = params->socktype;
	hints.ai_protocol = params->protocol;

	/* Resolve the server address and port */
	// getaddrinfo function request the IP address for the server name and 
	// the TCP port on the server that the client will connect
	iResult = getaddrinfo(params->ip, params->port, &hints, &result);
	if (iResult != 0) {
		printf("getaddrinfo failed with error: %d\n", iResult);
		WSACleanup();
		return 1;
	}
	/* Attempt to connect to an address until one succeeds  */
	for (ptr = result; ptr != NULL; ptr = ptr->ai_next)
	{
		/* Create a SOCKET for connecting to server */
		ClientSocket = socket(ptr->ai_family, ptr->ai_socktype, ptr->ai_protocol);
		if (ClientSocket == INVALID_SOCKET)
		{
			printf("socket failed with error: %ld\n", WSAGetLastError());
			WSACleanup();
			return 1;
		}

		/* Connect to server - For a client to communicate on a network, it must connect
		to a server. Connect function request the created socket and the sockaddr
		structure as parameters */
		iResult = connect(ClientSocket, ptr->ai_addr, (int)ptr->ai_addrlen);
		if (iResult == SOCKET_ERROR)
		{
			closesocket(ClientSocket);
			ClientSocket = INVALID_SOCKET;
			continue;
		}
		break;
	}
	char status = 'A';
	while (status != 'f')
	{	
		printf("\n\n******\n");
		printf("Opcodes:\n1 - Create \n2 - Read\n3 - Write\n4 - Delete\n");
		do {
			printf("Digite o opcode: \n");
			scanf("%d", &msg1.opcode);
		} while (msg1.opcode != 1 && msg1.opcode != 2 && msg1.opcode != 3 && msg1.opcode != 4);
		//Sleep(10);
		printf("Digite o nome do arquivo: \n");
		scanf("%s", &msg1.buf);

		/* Client send a message to the Server */
		iResult = send(ClientSocket, (const char *)&msg1, (int)sizeof(msg1), 0);
		if (iResult == SOCKET_ERROR) {
			printf("send failed with error: %d\n", WSAGetLastError());
			closesocket(ClientSocket);
			WSACleanup();
			return 1;
		}

		if (msg1.opcode == 2) { // READ
			iResult = recv(ClientSocket, (char *)&msg1, sizeof(msg1), 0);
			printf("**********\nLido do arquivo: %s\n", msg1.buf);
			printf("**********\n");
		}
		else if (msg1.opcode == 3) { // WRITE
			printf("**\nDigite o que quer escrever no arquivo:\n");
			scanf("%s", &msg1.buf);

			// cliente envia texto a ser escrito no arquivo
			iResult = send(ClientSocket, (const char *)&msg1, (int)sizeof(msg1), 0);
			if (iResult == SOCKET_ERROR) {
				printf("send failed with error: %d\n", WSAGetLastError());
				closesocket(ClientSocket);
				WSACleanup();
				return 1;
			}
		}

		printf("\n=================================\n");
		printf("Client - Bytes Sent: %ld\n", iResult);
		/* Wait for a reply of the Server */
		iResult = recv(ClientSocket, (char *)&msg1, sizeof(msg1), 0);

		printf("Client received-nome:  %s\n", msg1.name);
		printf("Client received-nro_msg:  %d\n", msg1.nro_msg);
		printf("Bytes received: %d\n", iResult);
		printf("Client received-message: %s\n", msg1.buf);
		printf("=================================\n");

		Sleep(10);
		msg1.nro_msg++;
		
		printf("\n**\n");
		printf("Tecle: f - Para terminar ou c - Para voltar para o comeco \n");

		status = 'A';
		while ((status != 'f') && (status != 'c'))
		{
			status = getchar();  Sleep(10);
		}

	}

	// Send a message	'0' to Server in order to close the connection
	msg1.buf[0] = '0';
	iResult = send(ClientSocket, (const char *)&msg1, (int)sizeof(msg1), 0);
	closesocket(ClientSocket);
	return 0;
}
